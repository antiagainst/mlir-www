<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dialect on MLIR: Multi-Level IR Compiler Framework</title><link>https://joker-eph.github.io/www-mlir/docs/dialects/</link><description>Recent content in Dialect on MLIR: Multi-Level IR Compiler Framework</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://joker-eph.github.io/www-mlir/docs/dialects/index.xml" rel="self" type="application/rss+xml"/><item><title>Affine</title><link>https://joker-eph.github.io/www-mlir/docs/dialects/affine/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://joker-eph.github.io/www-mlir/docs/dialects/affine/</guid><description>This dialect provides a powerful abstraction for affine operations and analyses.
[TOC]
Polyhedral Structures MLIR uses techniques from polyhedral compilation to make dependence analysis and loop transformations efficient and reliable. This section introduces some of the core concepts that are used throughout the document.
Dimensions and Symbols Dimensions and symbols are the two kinds of identifiers that can appear in the polyhedral structures, and are always of index type. Dimensions are declared in parentheses and symbols are declared in square brackets.</description></item><item><title>GPU Dialect</title><link>https://joker-eph.github.io/www-mlir/docs/dialects/gpu/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://joker-eph.github.io/www-mlir/docs/dialects/gpu/</guid><description>Note: this dialect is more likely to change than others in the near future; use with caution.
This dialect provides middle-level abstractions for launching GPU kernels following a programming model similar to that of CUDA or OpenCL. It provides abstractions for kernel invocations (and may eventually provide those for device management) that are not present at the lower level (e.g., as LLVM IR intrinsics for GPUs). Its goal is to abstract away device- and driver-specific manipulations to launch a GPU kernel and provide a simple path towards GPU execution from MLIR.</description></item><item><title>LLVM IR Dialect</title><link>https://joker-eph.github.io/www-mlir/docs/dialects/llvm/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://joker-eph.github.io/www-mlir/docs/dialects/llvm/</guid><description>This dialect wraps the LLVM IR types and instructions into MLIR types and operations. It provides several additional operations that are necessary to cover for the differences in the IR structure (e.g., MLIR does not have phi operations and LLVM IR does not have a constant operation).
In this document, we use &amp;ldquo;LLVM IR&amp;rdquo; to designate the intermediate representation of LLVM and &amp;ldquo;LLVM IR dialect&amp;rdquo; to refer to the MLIR dialect reflecting LLVM instructions and types.</description></item><item><title>SPIR-V Dialect</title><link>https://joker-eph.github.io/www-mlir/docs/dialects/spir-v/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://joker-eph.github.io/www-mlir/docs/dialects/spir-v/</guid><description>This document defines the SPIR-V dialect in MLIR.
SPIR-V is the Khronos Group’s binary intermediate language for representing graphics shaders and compute kernels. It is adopted by multiple Khronos Group’s APIs, including Vulkan and OpenCL.
Design Principles SPIR-V defines a stable binary format for hardware driver consumption. Regularity is one of the design goals of SPIR-V. All concepts are represented as SPIR-V instructions, including declaring extensions and capabilities, defining types and constants, defining functions, attaching additional properties to computation results, etc.</description></item><item><title>Standard Dialect</title><link>https://joker-eph.github.io/www-mlir/docs/dialects/standard/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://joker-eph.github.io/www-mlir/docs/dialects/standard/</guid><description>This dialect provides documentation for operations within the Standard dialect.
Note: This dialect is a collection of operations for several different concepts, and should be split into multiple more-focused dialects accordingly.
[TOC]
TODO: shape, which returns a 1D tensor, and can take an unknown rank tensor as input.
TODO: rank, which returns an index.
Terminator operations Terminator operations are required at the end of each block. They may contain a list of successors, i.</description></item><item><title>Vector Dialect</title><link>https://joker-eph.github.io/www-mlir/docs/dialects/vector/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://joker-eph.github.io/www-mlir/docs/dialects/vector/</guid><description>This dialect provides mid-level abstraction for the MLIR super-vectorizer.
[TOC]
Operations To see op documentation mlir-tblgen --gen-op-doc -I /path/to/mlir/include \ /path/to/mlir/include/mlir/Dialect/VectorOps/VectorOps.</description></item></channel></rss>