<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dialects on MLIR</title><link>https://mlir.llvm.org/docs/Dialects/</link><description>Recent content in Dialects on MLIR</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://mlir.llvm.org/docs/Dialects/index.xml" rel="self" type="application/rss+xml"/><item><title>Affine Dialect</title><link>https://mlir.llvm.org/docs/Dialects/Affine/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/Affine/</guid><description>This dialect provides a powerful abstraction for affine operations and analyses.
[TOC]
Polyhedral Structures MLIR uses techniques from polyhedral compilation to make dependence analysis and loop transformations efficient and reliable. This section introduces some of the core concepts that are used throughout the document.
Dimensions and Symbols Dimensions and symbols are the two kinds of identifiers that can appear in the polyhedral structures, and are always of index type. Dimensions are declared in parentheses and symbols are declared in square brackets.</description></item><item><title>Dialect 'affine' definition</title><link>https://mlir.llvm.org/docs/Dialects/AffineOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/AffineOps/</guid><description>[TOC]
Operation definition affine.for (AffineForOp) for operation
Description: The &amp;ldquo;affine.for&amp;rdquo; operation represents an affine loop nest, defining an SSA value for its induction variable. It has one region capturing the loop body. The induction variable is represented as a argument of this region. This SSA value always has type index, which is the size of the machine word. The stride, represented by step, is a positive constant integer which defaults to &amp;ldquo;1&amp;rdquo; if not present.</description></item><item><title>Dialect 'fxpmath' definition</title><link>https://mlir.llvm.org/docs/Dialects/FxpMathOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/FxpMathOps/</guid><description>[TOC]
Operation definition fxpmath.clampis (fxpmath::ClampISOp) Clamps a signed-integer like argument to a min/max range.
Description: Element-wise equivalent to: r = std::min(clamp_max, std::max(e, clamp_min))
Operands: operand: integer-like Attributes: Attribute MLIR Type Description clamp_min IntegerAttr arbitrary integer attribute attribute clamp_max IntegerAttr arbitrary integer attribute attribute Results: «unnamed»: integer-like fxpmath.convertis (fxpmath::ConvertISOp) Does an element-wise conversion from a signed integer to signed integer</description></item><item><title>Dialect 'gpu' definition</title><link>https://mlir.llvm.org/docs/Dialects/GPUOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/GPUOps/</guid><description>[TOC]
Operation definition gpu.all_reduce (gpu::AllReduceOp) Reduce values among workgroup.
Description: The &amp;ldquo;all_reduce&amp;rdquo; op reduces the value of every work item across a local workgroup. The result is equal for all work items of a workgroup.
For example, both
%1 = &amp;quot;gpu.all_reduce&amp;quot;(%0) ({}) { op = &amp;quot;add&amp;quot; } : (f32) -&amp;gt; (f32) %2 = &amp;quot;gpu.all_reduce&amp;quot;(%0) ({ ^bb(%lhs : f32, %rhs : f32): %sum = addf %lhs, %rhs : f32 &amp;quot;gpu.yield&amp;quot;(%sum) : (f32) -&amp;gt; () }) : (f32) -&amp;gt; (f32) compute the sum of each work item's %0 value.</description></item><item><title>Dialect 'linalg' definition</title><link>https://mlir.llvm.org/docs/Dialects/LinalgDoc/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/LinalgDoc/</guid><description>The linalg dialect groups together a set of types, operations and transformations that are useful to implement a structured abstraction on buffers and tensors. These abstractions are useful for transformations and can lower to scalar load/store and other operations or to more general library calls.
The linalg dialect manipulates the following types and operations:
Core data types and special ops. The following abstractions are used by the linalg dialect:
Views The current implementation uses the strided memref abstraction.</description></item><item><title>Dialect 'loop' definition</title><link>https://mlir.llvm.org/docs/Dialects/LoopOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/LoopOps/</guid><description>[TOC]
Operation definition loop.for (ForOp) for operation
Description: The &amp;ldquo;loop.for&amp;rdquo; operation represents a loop nest taking 3 SSA value as operands that represent the lower bound, upper bound and step respectively. The operation defines an SSA value for its induction variable. It has one region capturing the loop body. The induction variable is represented as an argument of this region. This SSA value always has type index, which is the size of the machine word.</description></item><item><title>Dialect 'nvvm' definition</title><link>https://mlir.llvm.org/docs/Dialects/NVVMOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/NVVMOps/</guid><description>[TOC]
Operation definition nvvm.barrier0 (NVVM::Barrier0Op) Description: Operands: Attributes: Results: nvvm.read.ptx.sreg.ntid.x (NVVM::BlockDimXOp) Description: Operands: Attributes: Results: res: LLVM dialect type nvvm.read.ptx.sreg.ntid.y (NVVM::BlockDimYOp) Description: Operands: Attributes: Results: res: LLVM dialect type nvvm.read.ptx.sreg.ntid.z (NVVM::BlockDimZOp) Description: Operands: Attributes: Results: res: LLVM dialect type nvvm.read.ptx.sreg.ctaid.x (NVVM::BlockIdXOp) Description: Operands: Attributes: Results: res: LLVM dialect type nvvm.read.ptx.sreg.ctaid.y (NVVM::BlockIdYOp) Description: Operands: Attributes: Results: res: LLVM dialect type nvvm.read.ptx.sreg.ctaid.z (NVVM::BlockIdZOp) Description: Operands: Attributes: Results: res: LLVM dialect type nvvm.</description></item><item><title>Dialect 'quant' definition</title><link>https://mlir.llvm.org/docs/Dialects/QuantOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/QuantOps/</guid><description>[TOC]
Operation definition quant.const_fake_quant (quant::ConstFakeQuant) Simulates the effect of uniform quantization with const range.
Description: Given a const min, max, num_bits and narrow_range attribute, applies the same uniform quantization simulation as is done by the TensorFlow fake_quant_with_min_max_args op. See the fakeQuantAttrsToType() utility method and the quant-convert-simulated-quantization pass for futher details.
Operands: inputs: tensor of 32-bit float values Attributes: Attribute MLIR Type Description min FloatAttr 32-bit float attribute attribute max FloatAttr 32-bit float attribute attribute num_bits IntegerAttr 64-bit integer attribute attribute narrow_range BoolAttr bool attribute attribute is_signed BoolAttr bool attribute attribute Results: outputs: tensor of 32-bit float values quant.</description></item><item><title>Dialect 'rocdl' definition</title><link>https://mlir.llvm.org/docs/Dialects/ROCDLOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/ROCDLOps/</guid><description>[TOC]
Operation definition rocdl.workgroup.dim.x (ROCDL::BlockDimXOp) Description: Operands: Attributes: Results: res: LLVM dialect type rocdl.workgroup.dim.y (ROCDL::BlockDimYOp) Description: Operands: Attributes: Results: res: LLVM dialect type rocdl.workgroup.dim.z (ROCDL::BlockDimZOp) Description: Operands: Attributes: Results: res: LLVM dialect type rocdl.workgroup.id.x (ROCDL::BlockIdXOp) Description: Operands: Attributes: Results: res: LLVM dialect type rocdl.workgroup.id.y (ROCDL::BlockIdYOp) Description: Operands: Attributes: Results: res: LLVM dialect type rocdl.workgroup.id.z (ROCDL::BlockIdZOp) Description: Operands: Attributes: Results: res: LLVM dialect type rocdl.</description></item><item><title>Dialect 'spv' definition</title><link>https://mlir.llvm.org/docs/Dialects/SPIRVOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/SPIRVOps/</guid><description>The SPIR-V dialect in MLIR.
SPIR-V is a binary intermediate language for representing graphical-shader stages and compute kernels for multiple Khronos APIs, including OpenCL, OpenGL, and Vulkan. See https://www.khronos.org/registry/spir-v for more details regarding SPIR-V itself.
The SPIR-V dialect aims to be a proper compiler intermediate representation to faciliate transformations. Ops in this dialect stay at the same semantic level as the SPIR-V specification and try to have one-to-one mapping to the corresponding SPIR-V instructions; but they may deviate representationally to utilize MLIR mechanisms if it results in better representation and thus benefits transformations.</description></item><item><title>Dialect 'vector' definition</title><link>https://mlir.llvm.org/docs/Dialects/VectorOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/VectorOps/</guid><description>[TOC]
Operation definition vector.broadcast (vector::BroadcastOp) broadcast operation
Description: Broadcasts the scalar or k-D vector value in the source operand to a n-D result vector such that the broadcast makes sense, i.e., the source operand is duplicated to match the given rank and sizes in the result vector. The legality rules are:
the source operand must have the same element type as the result type a k-D vector &amp;lt;s_1 x .</description></item><item><title>GPU Dialect</title><link>https://mlir.llvm.org/docs/Dialects/GPU/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/GPU/</guid><description>Note: this dialect is more likely to change than others in the near future; use with caution.
This dialect provides middle-level abstractions for launching GPU kernels following a programming model similar to that of CUDA or OpenCL. It provides abstractions for kernel invocations (and may eventually provide those for device management) that are not present at the lower level (e.g., as LLVM IR intrinsics for GPUs). Its goal is to abstract away device- and driver-specific manipulations to launch a GPU kernel and provide a simple path towards GPU execution from MLIR.</description></item><item><title>Linalg Dialect</title><link>https://mlir.llvm.org/docs/Dialects/Linalg/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/Linalg/</guid><description>To generate the documentation:
mlir-tblgen --gen-op-doc -I /path/to/mlir/include \ /path/to/mlir/include/mlir/Dialect/Linalg/IR/LinalgDoc.td</description></item><item><title>LLVM IR Dialect</title><link>https://mlir.llvm.org/docs/Dialects/LLVM/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/LLVM/</guid><description>This dialect wraps the LLVM IR types and instructions into MLIR types and operations. It provides several additional operations that are necessary to cover for the differences in the IR structure (e.g., MLIR does not have phi operations and LLVM IR does not have a constant operation).
In this document, we use &amp;ldquo;LLVM IR&amp;rdquo; to designate the intermediate representation of LLVM and &amp;ldquo;LLVM IR dialect&amp;rdquo; to refer to the MLIR dialect reflecting LLVM instructions and types.</description></item><item><title>SPIR-V Dialect</title><link>https://mlir.llvm.org/docs/Dialects/SPIR-V/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/SPIR-V/</guid><description>This document describes the design of the SPIR-V dialect in MLIR. It lists various design choices we made for modeling different SPIR-V mechanisms, and their rationale.
This document also explains in a high-level manner how different components are organized and implemented in the code and gives steps to follow for extending them.
This document assumes familiarity with SPIR-V. SPIR-V is the Khronos Group’s binary intermediate language for representing graphics shaders and compute kernels.</description></item><item><title>Standard Dialect</title><link>https://mlir.llvm.org/docs/Dialects/Standard/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/Standard/</guid><description>This dialect provides documentation for operations within the Standard dialect.
Note: This dialect is a collection of operations for several different concepts, and should be split into multiple more-focused dialects accordingly.
[TOC]
TODO: shape, which returns a 1D tensor, and can take an unknown rank tensor as input.
TODO: rank, which returns an index.
Terminator operations Terminator operations are required at the end of each block. They may contain a list of successors, i.</description></item><item><title>Vector Dialect</title><link>https://mlir.llvm.org/docs/Dialects/Vector/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/Vector/</guid><description>This dialect provides mid-level abstraction for the MLIR super-vectorizer.
[TOC]
Operations mlir-tblgen --gen-op-doc -I /path/to/mlir/include \ /path/to/mlir/include/mlir/Dialect/VectorOps/VectorOps.td</description></item></channel></rss>