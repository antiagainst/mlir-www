digraph "mlir::SDBMDimExpr"
{
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node6 [label="mlir::SDBMDimExpr",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="mlir::SDBMInputExpr",height=0.2,width=0.4,color="black",URL="$classmlir_1_1SDBMInputExpr.html",tooltip="SDBM \"input\" variable expression can be either a dimension identifier or a symbol identifier..."];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="mlir::SDBMTermExpr",height=0.2,width=0.4,color="black",URL="$classmlir_1_1SDBMTermExpr.html",tooltip="SDBM term expression can be one of: "];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="mlir::SDBMDirectExpr",height=0.2,width=0.4,color="black",URL="$classmlir_1_1SDBMDirectExpr.html",tooltip="SDBM direct expression includes exactly one variable (symbol or dimension), which is not negated in t..."];
  Node10 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="mlir::SDBMVaryingExpr",height=0.2,width=0.4,color="black",URL="$classmlir_1_1SDBMVaryingExpr.html",tooltip="SDBM varying expression can be one of: "];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="mlir::SDBMExpr",height=0.2,width=0.4,color="black",URL="$classmlir_1_1SDBMExpr.html",tooltip="Striped Difference-Bounded Matrix (SDBM) expression is a base left-hand side expression for the SDBM ..."];
  Node12 -> Node11 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" impl" ,fontname="Helvetica"];
  Node12 [label="mlir::detail::SDBMExprStorage",height=0.2,width=0.4,color="black",URL="$structmlir_1_1detail_1_1SDBMExprStorage.html"];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="mlir::StorageUniquer\l::BaseStorage",height=0.2,width=0.4,color="black",URL="$classmlir_1_1StorageUniquer_1_1BaseStorage.html",tooltip="This class acts as the base storage that all storage classes must derived from. "];
  Node14 -> Node12 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dialect" ,fontname="Helvetica"];
  Node14 [label="mlir::SDBMDialect",height=0.2,width=0.4,color="black",URL="$classmlir_1_1SDBMDialect.html"];
  Node15 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="mlir::Dialect",height=0.2,width=0.4,color="black",URL="$classmlir_1_1Dialect.html",tooltip="Dialects are groups of MLIR operations and behavior associated with the entire group. "];
  Node16 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" decodeHook" ,fontname="Helvetica"];
  Node16 [label="function\< bool(const\l OpaqueElementsAttr,\l ElementsAttr &)\>",height=0.2,width=0.4,color="grey75"];
  Node17 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" extractElementHook" ,fontname="Helvetica"];
  Node17 [label="function\< Attribute\l(const OpaqueElementsAttr,\l ArrayRef\< uint64_t \>)\>",height=0.2,width=0.4,color="grey75"];
  Node18 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" constantFoldHook" ,fontname="Helvetica"];
  Node18 [label="function\< LogicalResult\l(Operation *, ArrayRef\l\< Attribute \>, SmallVectorImpl\l\< Attribute \> &)\>",height=0.2,width=0.4,color="grey75"];
}
