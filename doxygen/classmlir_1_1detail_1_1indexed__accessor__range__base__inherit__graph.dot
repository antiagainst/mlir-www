digraph "mlir::detail::indexed_accessor_range_base&lt; DerivedT, BaseT, T, PointerT, ReferenceT &gt;"
{
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="mlir::detail::indexed\l_accessor_range_base\l\< DerivedT, BaseT, T,\l PointerT, ReferenceT \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node0 -> Node1 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< OperandRange, OpOperand\l *, Value, Value, Value \>" ,fontname="Helvetica"];
  Node1 [label="mlir::detail::indexed\l_accessor_range_base\l\< OperandRange, OpOperand\l *, Value, Value, Value \>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1detail_1_1indexed__accessor__range__base.html"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="mlir::OperandRange",height=0.2,width=0.4,color="black",URL="$classmlir_1_1OperandRange.html",tooltip="This class implements the operand iterators for the Operation class. "];
  Node0 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< RegionRange, PointerUnion\l\< Region *, const std::unique\l_ptr\< Region \> *\>, Region *,\l Region *, Region *\>" ,fontname="Helvetica"];
  Node3 [label="mlir::detail::indexed\l_accessor_range_base\l\< RegionRange, PointerUnion\l\< Region *, const std::unique\l_ptr\< Region \> *\>, Region *,\l Region *, Region *\>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1detail_1_1indexed__accessor__range__base.html"];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="mlir::RegionRange",height=0.2,width=0.4,color="black",URL="$classmlir_1_1RegionRange.html",tooltip="This class provides an abstraction over the different types of ranges over Regions. "];
  Node0 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, std::pair\l\< BaseT, ptrdiff_t \>,\l T, PointerT, ReferenceT \>" ,fontname="Helvetica"];
  Node5 [label="mlir::detail::indexed\l_accessor_range_base\l\< DerivedT, std::pair\l\< BaseT, ptrdiff_t \>, T,\l PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1detail_1_1indexed__accessor__range__base.html"];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="mlir::indexed_accessor\l_range\< DerivedT, BaseT,\l T, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1indexed__accessor__range.html",tooltip="This class provides an implementation of a range of indexed_accessor_iterators where the base is not ..."];
  Node6 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ResultRange, Operation\l *, OpResult, OpResult,\l OpResult \>" ,fontname="Helvetica"];
  Node7 [label="mlir::indexed_accessor\l_range\< ResultRange, Operation\l *, OpResult, OpResult, OpResult \>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1indexed__accessor__range.html"];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="mlir::ResultRange",height=0.2,width=0.4,color="black",URL="$classmlir_1_1ResultRange.html",tooltip="This class implements the result iterators for the Operation class. "];
  Node0 -> Node9 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ValueRange, detail\l::ValueRangeOwner, Value,\l Value, Value \>" ,fontname="Helvetica"];
  Node9 [label="mlir::detail::indexed\l_accessor_range_base\l\< ValueRange, detail::\lValueRangeOwner, Value,\l Value, Value \>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1detail_1_1indexed__accessor__range__base.html"];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="mlir::ValueRange",height=0.2,width=0.4,color="black",URL="$classmlir_1_1ValueRange.html",tooltip="This class provides an abstraction over the different types of ranges over Values. "];
  Node0 -> Node11 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ResultRange, std\l::pair\< Operation *,\l ptrdiff_t \>, OpResult,\l OpResult, OpResult \>" ,fontname="Helvetica"];
  Node11 [label="mlir::detail::indexed\l_accessor_range_base\l\< ResultRange, std::pair\l\< Operation *, ptrdiff_t\l \>, OpResult, OpResult, OpResult \>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1detail_1_1indexed__accessor__range__base.html"];
  Node11 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node0 -> Node12 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< SuccessorRange, BlockOperand\l *, Block *, Block *, Block *\>" ,fontname="Helvetica"];
  Node12 [label="mlir::detail::indexed\l_accessor_range_base\l\< SuccessorRange, BlockOperand\l *, Block *, Block *, Block *\>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1detail_1_1indexed__accessor__range__base.html"];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="mlir::SuccessorRange",height=0.2,width=0.4,color="black",URL="$classmlir_1_1SuccessorRange.html",tooltip="This class implements the successor iterators for Block. "];
}
