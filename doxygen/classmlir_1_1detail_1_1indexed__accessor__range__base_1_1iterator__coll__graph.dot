digraph "mlir::detail::indexed_accessor_range_base&lt; DerivedT, BaseT, T, PointerT, ReferenceT &gt;::iterator"
{
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node5 [label="mlir::detail::indexed\l_accessor_range_base\l\< DerivedT, BaseT, T,\l PointerT, ReferenceT \>\l::iterator",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="mlir::indexed_accessor\l_iterator\< iterator, BaseT,\l T, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1indexed__accessor__iterator.html"];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::iterator_facade\l_base\< iterator, std\l::random_access_iterator\l_tag, T, std::ptrdiff_t,\l PointerT, ReferenceT \>",height=0.2,width=0.4,color="grey75"];
  Node8 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" index" ,fontname="Helvetica"];
  Node8 [label="ptrdiff_t",height=0.2,width=0.4,color="black",URL="$classptrdiff__t.html"];
  Node9 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" base" ,fontname="Helvetica"];
  Node9 [label="BaseT",height=0.2,width=0.4,color="grey75"];
  Node10 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< iterator, BaseT,\l T, PointerT, ReferenceT \>" ,fontname="Helvetica"];
  Node10 [label="mlir::indexed_accessor\l_iterator\< DerivedT, BaseT,\l T, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classmlir_1_1indexed__accessor__iterator.html",tooltip="A utility class used to implement an iterator that contains some base object and an index..."];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::iterator_facade\l_base\< DerivedT, std\l::random_access_iterator\l_tag, T, std::ptrdiff_t,\l PointerT, ReferenceT \>",height=0.2,width=0.4,color="grey75"];
  Node8 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" index" ,fontname="Helvetica"];
  Node9 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" base" ,fontname="Helvetica"];
}
